###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/Jun/2013  11:15:14 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\Source\Coordinator.c                #
#    Command line       =  -f F:\Study\毕业设计\Zigbee工程\TestC\Projects\zst #
#                          ack\Samples\TestC\CC2530DB\..\..\..\Tools\CC2530DB #
#                          \f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func       #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\Tools\CC2530DB\f8 #
#                          wConfig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0      #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\Source\Coordinator.c -D ZTOOL_P1    #
#                          -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC F:\Study\毕业设计\Zigbee工 #
#                          程\TestC\Projects\zstack\Samples\TestC\CC2530DB\Co #
#                          ordinatorEB\List\ -lA F:\Study\毕业设计\Zigbee工程 #
#                          \TestC\Projects\zstack\Samples\TestC\CC2530DB\Coor #
#                          dinatorEB\List\ --diag_suppress Pe001,Pa010 -o     #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\CoordinatorEB\Obj\ -e      #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I F:\Study\毕业设计\Zigbee工程\TestC\Projects\zst #
#                          ack\Samples\TestC\CC2530DB\ -I                     #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\SOURCE\ -I              #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\ZMAIN\TI2530DB\   #
#                          -I F:\Study\毕业设计\Zigbee工程\TestC\Projects\zst #
#                          ack\Samples\TestC\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MT\ -I F:\Study\毕业设计\Zigbee工程\TestC\Proje #
#                          cts\zstack\Samples\TestC\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\ -I                          #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          HAL\TARGET\CC2530EB\ -I F:\Study\毕业设计\Zigbee工 #
#                          程\TestC\Projects\zstack\Samples\TestC\CC2530DB\.. #
#                          \..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I         #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          OSAL\INCLUDE\ -I F:\Study\毕业设计\Zigbee工程\Test #
#                          C\Projects\zstack\Samples\TestC\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\STACK\AF\ -I                      #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\NWK\ -I F:\Study\毕业设计\Zigbee工程\TestC\P #
#                          rojects\zstack\Samples\TestC\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\STACK\SEC\ -I                        #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SAPI\ -I F:\Study\毕业设计\Zigbee工程\TestC\ #
#                          Projects\zstack\Samples\TestC\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SYS\ -I                       #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\ZDO\ -I F:\Study\毕业设计\Zigbee工程\TestC\P #
#                          rojects\zstack\Samples\TestC\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\ZMAC\F8W\ -I                         #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          ZMAC\ -I F:\Study\毕业设计\Zigbee工程\TestC\Projec #
#                          ts\zstack\Samples\TestC\CC2530DB\..\..\..\..\..\CO #
#                          MPONENTS\SERVICES\SADDR\ -I                        #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          SERVICES\SDATA\ -I F:\Study\毕业设计\Zigbee工程\Te #
#                          stC\Projects\zstack\Samples\TestC\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\MAC\INCLUDE\ -I                 #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\HIGH_LEVEL\ -I F:\Study\毕业设计\Zigbee工程\Te #
#                          stC\Projects\zstack\Samples\TestC\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I         #
#                          F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz              #
#                          --require_prototypes                               #
#    List file          =  F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\CoordinatorEB\List\Coordin #
#                          ator.lst                                           #
#    Object file        =  F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack #
#                          \Samples\TestC\CC2530DB\CoordinatorEB\Obj\Coordina #
#                          tor.r51                                            #
#                                                                             #
#                                                                             #
###############################################################################

F:\Study\毕业设计\Zigbee工程\TestC\Projects\zstack\Samples\TestC\Source\Coordinator.c
      1          #include "OSAL.h"
      2          #include "AF.h"
      3          #include "ZDApp.h"
      4          #include "ZDObject.h"
      5          #include "ZDProfile.h"
      6          
      7          #include "Common.h"
      8          #include "DebugTrace.h"
      9          
     10          #if !defined( WIN32 )
     11            #include "OnBoard.h"
     12          #endif
     13          
     14          /* HAL */
     15          #include "hal_lcd.h"
     16          #include "hal_led.h"
     17          #include "hal_key.h"
     18          #include "hal_uart.h"
     19          #include "OSAL_Nv.h"
     20          

   \                                 In  segment XDATA_ROM_C, align 1
     21          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0A00         DW 10
     22          {
     23            GENERICAPP_CLUSTERID
     24          };
     25                                  

   \                                 In  segment XDATA_ROM_C, align 1
     26          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   00           DB 0
   \   00000A   0000         DW 0H
     27          {
     28            GENERICAPP_ENDPOINT,              //  int Endpoint;
     29            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
     30            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
     31            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
     32            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
     33            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
     34            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
     35            0,          //  byte  AppNumInClusters;
     36            (cId_t *)NULL   //  byte *pAppInClusterList;
     37          };
     38          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     39          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     40          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     41          byte GenericApp_TaskID;
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     42          byte GenericApp_TransID;
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     43          static void rxCB(uint8 port,uint8 event);
     44          
     45          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
     46          void GenericApp_SendTheMessage(unsigned char theMessageData);
     47          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     48          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     49          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
     50            GenericApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
     51            GenericApp_TransID = 0;
   \   00000F   90....       MOV     DPTR,#GenericApp_TransID
   \   000012   E4           CLR     A
   \   000013   F0           MOVX    @DPTR,A
     52            
     53          
     54            
     55            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000014   90....       MOV     DPTR,#GenericApp_epDesc
   \   000017   740A         MOV     A,#0xa
   \   000019   F0           MOVX    @DPTR,A
     56            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00001A   A3           INC     DPTR
   \   00001B   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
     57            GenericApp_epDesc.simpleDesc
     58                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000022   A3           INC     DPTR
   \   000023   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
   \   000027   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   000029   F0           MOVX    @DPTR,A
     59            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00002A   A3           INC     DPTR
   \   00002B   E4           CLR     A
   \   00002C   F0           MOVX    @DPTR,A
     60            afRegister( &GenericApp_epDesc );
   \   00002D                ; Setup parameters for call to function afRegister
   \   00002D   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   00002F   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000031   12....       LCALL   ??afRegister?relay
     61            
     62            halUARTCfg_t uartConfig;
     63            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   000034   85..82       MOV     DPL,?XSP + 0
   \   000037   85..83       MOV     DPH,?XSP + 1
   \   00003A   7401         MOV     A,#0x1
   \   00003C   F0           MOVX    @DPTR,A
     64            uartConfig.baudRate             = HAL_UART_BR_9600;
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E4           CLR     A
   \   000041   F0           MOVX    @DPTR,A
     65            uartConfig.flowControl          = FALSE;
   \   000042   7402         MOV     A,#0x2
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
     66            uartConfig.callBackFunc         = rxCB;
   \   000049   741B         MOV     A,#0x1b
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   74..         MOV     A,#??rxCB?relay & 0xff
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   000054   F0           MOVX    @DPTR,A
     67            HalUARTOpen (0, &uartConfig);
   \   000055                ; Setup parameters for call to function HalUARTOpen
   \   000055   85..82       MOV     DPL,?XSP + 0
   \   000058   85..83       MOV     DPH,?XSP + 1
   \   00005B   AA82         MOV     R2,DPL
   \   00005D   AB83         MOV     R3,DPH
   \   00005F   7900         MOV     R1,#0x0
   \   000061   12....       LCALL   ??HalUARTOpen?relay
     68           
     69          }
   \   000064   741D         MOV     A,#0x1d
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   7F01         MOV     R7,#0x1
   \   00006B   02....       LJMP    ?BANKED_LEAVE_XDATA
     70          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     71          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     72          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     73            afIncomingMSGPacket_t *MSGpkt;
     74          
     75            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6036         JZ      ??GenericApp_ProcessEvent_0
     76            {
     77              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   8017         SJMP    ??GenericApp_ProcessEvent_1
     78              while ( MSGpkt )
     79              {
     80                switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   641A         XRL     A,#0x1a
   \   000017   7007         JNZ     ??GenericApp_ProcessEvent_3
     81                {
     82                  case AF_INCOMING_MSG_CMD:
     83                    GenericApp_MessageMSGCB(MSGpkt);
   \   000019                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   000019   EE           MOV     A,R6
   \   00001A   FA           MOV     R2,A
   \   00001B   EF           MOV     A,R7
   \   00001C   FB           MOV     R3,A
   \   00001D   12....       LCALL   ??GenericApp_MessageMSGCB?relay
     84                      break;
     85                    
     86                  default:
     87                    break;
     88                }
     89                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000020                ; Setup parameters for call to function osal_msg_deallocate
   \   000020   EE           MOV     A,R6
   \   000021   FA           MOV     R2,A
   \   000022   EF           MOV     A,R7
   \   000023   FB           MOV     R3,A
   \   000024   12....       LCALL   ??osal_msg_deallocate?relay
     90                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   000027                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   000027   90....       MOV     DPTR,#GenericApp_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   ??osal_msg_receive?relay
   \   00002F   8A..         MOV     ?V0 + 2,R2
   \   000031   8B..         MOV     ?V0 + 3,R3
   \   000033   AE..         MOV     R6,?V0 + 2
   \   000035   AF..         MOV     R7,?V0 + 3
     91              }
   \   000037   EE           MOV     A,R6
   \   000038   4F           ORL     A,R7
   \   000039   70D5         JNZ     ??GenericApp_ProcessEvent_2
     92              return (events ^ SYS_EVENT_MSG);
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   E5..         MOV     A,?V0 + 1
   \   00003F   6480         XRL     A,#0x80
   \   000041   FB           MOV     R3,A
   \   000042   8004         SJMP    ??GenericApp_ProcessEvent_4
     93            }
     94            return 0;
   \                     ??GenericApp_ProcessEvent_0:
   \   000044   7A00         MOV     R2,#0x0
   \   000046   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_4:
   \   000048   7F04         MOV     R7,#0x4
   \   00004A   02....       LJMP    ?BANKED_LEAVE_XDATA
     95          }
     96          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     97          void GenericApp_MessageMSGCB(afIncomingMSGPacket_t *pkt)
   \                     GenericApp_MessageMSGCB:
     98          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     99            unsigned char buffer[16]; 
    100            
    101            switch ( pkt->clusterId )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000017   A3           INC     DPTR
   \   000018   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000019   7041         JNZ     ??GenericApp_MessageMSGCB_1
    102            {
    103            case GENERICAPP_CLUSTERID:
    104               osal_memcpy(buffer,pkt->cmd.Data,12);
   \   00001B                ; Setup parameters for call to function osal_memcpy
   \   00001B   EA           MOV     A,R2
   \   00001C   2421         ADD     A,#0x21
   \   00001E   F582         MOV     DPL,A
   \   000020   EB           MOV     A,R3
   \   000021   3400         ADDC    A,#0x0
   \   000023   F583         MOV     DPH,A
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 0,A
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 1,A
   \   00002C   75..00       MOV     ?V0 + 2,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000034   7C0C         MOV     R4,#0xc
   \   000036   7D00         MOV     R5,#0x0
   \   000038   7403         MOV     A,#0x3
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??osal_memcpy?relay
   \   000044   7403         MOV     A,#0x3
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
    105               HalUARTWrite(0,buffer,12);
   \   000049                ; Setup parameters for call to function HalUARTWrite
   \   000049   7C0C         MOV     R4,#0xc
   \   00004B   7D00         MOV     R5,#0x0
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   AA82         MOV     R2,DPL
   \   000055   AB83         MOV     R3,DPH
   \   000057   7900         MOV     R1,#0x0
   \   000059   12....       LCALL   ??HalUARTWrite?relay
    106               
    107             break;
    108            }
    109          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   00005C   7410         MOV     A,#0x10
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   7F03         MOV     R7,#0x3
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    110          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    111          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    112          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 80
   \   000005   74B0         MOV     A,#-0x50
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
    113            unsigned char Uartbuf[80];
    114            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    115            #if SERIAL_APP_LOOPBACK
    116              (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    117            #else
    118              !SerialApp_TxLen)
   \   00000C   7407         MOV     A,#0x7
   \   00000E   5E           ANL     A,R6
   \   00000F   7003         JNZ     $+5
   \   000011   02....       LJMP    ??rxCB_0 & 0xFFFF
   \   000014   90....       MOV     DPTR,#SerialApp_TxLen
   \   000017   E0           MOVX    A,@DPTR
   \   000018   6003         JZ      $+5
   \   00001A   02....       LJMP    ??rxCB_0 & 0xFFFF
    119            #endif
    120            {
    121              SerialApp_TxLen = HalUARTRead(0, Uartbuf, 80);
   \   00001D                ; Setup parameters for call to function HalUARTRead
   \   00001D   7C50         MOV     R4,#0x50
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   85..82       MOV     DPL,?XSP + 0
   \   000024   85..83       MOV     DPH,?XSP + 1
   \   000027   AA82         MOV     R2,DPL
   \   000029   AB83         MOV     R3,DPH
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   12....       LCALL   ??HalUARTRead?relay
   \   000030   EA           MOV     A,R2
   \   000031   90....       MOV     DPTR,#SerialApp_TxLen
   \   000034   F0           MOVX    @DPTR,A
    122              if (SerialApp_TxLen)
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??rxCB_0 & 0xFFFF
    123              {
    124                if(osal_memcmp(Uartbuf, "LON",3)) GenericApp_SendTheMessage(1);
   \   00003A   85..82       MOV     DPL,?XSP + 0
   \   00003D   85..83       MOV     DPH,?XSP + 1
   \   000040   A982         MOV     R1,DPL
   \   000042   AA83         MOV     R2,DPH
   \   000044   89..         MOV     ?V0 + 0,R1
   \   000046   8A..         MOV     ?V0 + 1,R2
   \   000048   75..00       MOV     ?V0 + 2,#0x0
   \   00004B                ; Setup parameters for call to function osal_memcmp
   \   00004B   75....       MOV     ?V0 + 4,#`?<Constant "LON">` & 0xff
   \   00004E   75....       MOV     ?V0 + 5,#(`?<Constant "LON">` >> 8) & 0xff
   \   000051   75..00       MOV     ?V0 + 6,#0x0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   7C03         MOV     R4,#0x3
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   12....       LCALL   ??Subroutine1_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   6005         JZ      ??rxCB_1
   \   000066                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000066   7901         MOV     R1,#0x1
   \   000068   12....       LCALL   ??GenericApp_SendTheMessage?relay
    125                if(osal_memcmp(Uartbuf, "LOFF",4)) GenericApp_SendTheMessage(2);
   \                     ??rxCB_1:
   \   00006B                ; Setup parameters for call to function osal_memcmp
   \   00006B   75....       MOV     ?V0 + 4,#`?<Constant "LOFF">` & 0xff
   \   00006E   75....       MOV     ?V0 + 5,#(`?<Constant "LOFF">` >> 8) & 0xff
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000076   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   000079   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007C   E9           MOV     A,R1
   \   00007D   6005         JZ      ??rxCB_2
   \   00007F                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   00007F   7902         MOV     R1,#0x2
   \   000081   12....       LCALL   ??GenericApp_SendTheMessage?relay
    126                if(osal_memcmp(Uartbuf, "TEMP",4)) GenericApp_SendTheMessage(3);
   \                     ??rxCB_2:
   \   000084                ; Setup parameters for call to function osal_memcmp
   \   000084   75....       MOV     ?V0 + 4,#`?<Constant "TEMP">` & 0xff
   \   000087   75....       MOV     ?V0 + 5,#(`?<Constant "TEMP">` >> 8) & 0xff
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008F   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   \   000095   E9           MOV     A,R1
   \   000096   6005         JZ      ??rxCB_3
   \   000098                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000098   7903         MOV     R1,#0x3
   \   00009A   12....       LCALL   ??GenericApp_SendTheMessage?relay
    127                if(osal_memcmp(Uartbuf, "TEST",4)) 
   \                     ??rxCB_3:
   \   00009D                ; Setup parameters for call to function osal_memcmp
   \   00009D   75....       MOV     ?V0 + 4,#`?<Constant "TEST">` & 0xff
   \   0000A0   75....       MOV     ?V0 + 5,#(`?<Constant "TEST">` >> 8) & 0xff
   \   0000A3   78..         MOV     R0,#?V0 + 4
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A8   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   6012         JZ      ??rxCB_4
    128                {
    129                  GenericApp_SendTheMessage(4);
   \   0000B1                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   0000B1   7904         MOV     R1,#0x4
   \   0000B3   12....       LCALL   ??GenericApp_SendTheMessage?relay
    130                  HalUARTWrite(0,"\n(ZSOK)\n",8);        
   \   0000B6                ; Setup parameters for call to function HalUARTWrite
   \   0000B6   7C08         MOV     R4,#0x8
   \   0000B8   7D00         MOV     R5,#0x0
   \   0000BA   7A..         MOV     R2,#`?<Constant "\\n(ZSOK)\\n">` & 0xff
   \   0000BC   7B..         MOV     R3,#(`?<Constant "\\n(ZSOK)\\n">` >> 8) & 0xff
   \   0000BE   7900         MOV     R1,#0x0
   \   0000C0   12....       LCALL   ??HalUARTWrite?relay
    131                }
    132                SerialApp_TxLen=0;
   \                     ??rxCB_4:
   \   0000C3   90....       MOV     DPTR,#SerialApp_TxLen
   \   0000C6   E4           CLR     A
   \   0000C7   F0           MOVX    @DPTR,A
    133              }
    134            }
    135          }
   \                     ??rxCB_0:
   \   0000C8   7450         MOV     A,#0x50
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CD   7F07         MOV     R7,#0x7
   \   0000CF   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7C04         MOV     R4,#0x4
   \   000002   7D00         MOV     R5,#0x0
   \   000004   A9..         MOV     R1,?V0 + 0
   \   000006   AA..         MOV     R2,?V0 + 1
   \   000008                REQUIRE ??Subroutine1_0
   \   000008                ; // Fall through to label ??Subroutine1_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine1_0:
   \   000000   AB..         MOV     R3,?V0 + 2
   \   000002   12....       LCALL   ??osal_memcmp?relay
   \   000005   7403         MOV     A,#0x3
   \   000007   22           RET
    136          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    137          void GenericApp_SendTheMessage(unsigned char theMessageData)
   \                     GenericApp_SendTheMessage:
    138          { 
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
    139            afAddrType_t my_DstAddr;
    140            my_DstAddr.addrMode=(afAddrMode_t)Addr16Bit;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7402         MOV     A,#0x2
   \   000019   F0           MOVX    @DPTR,A
    141            my_DstAddr.endPoint=GENERICAPP_ENDPOINT;
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   740A         MOV     A,#0xa
   \   000021   F0           MOVX    @DPTR,A
    142            my_DstAddr.addr.shortAddr=0xFFFF; 
   \   000022   7401         MOV     A,#0x1
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   74FF         MOV     A,#-0x1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   F0           MOVX    @DPTR,A
    143          
    144            AF_DataRequest(&my_DstAddr
    145                           ,&GenericApp_epDesc
    146                           ,GENERICAPP_CLUSTERID
    147                           ,1
    148                           ,&theMessageData
    149                           ,&GenericApp_TransID
    150                           ,AF_DISCV_ROUTE
    151                           ,AF_DEFAULT_RADIUS);
   \   00002C                ; Setup parameters for call to function AF_DataRequest
   \   00002C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000037   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   8582..       MOV     ?V0 + 0,DPL
   \   000047   8583..       MOV     ?V0 + 1,DPH
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   75..01       MOV     ?V0 + 0,#0x1
   \   000052   75..00       MOV     ?V0 + 1,#0x0
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   75..0A       MOV     ?V0 + 0,#0xa
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   7920         MOV     R1,#0x20
   \   000064   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000066   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000068   740A         MOV     A,#0xa
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??AF_DataRequest?relay
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?DEALLOC_XSTACK8
    152          }
   \   000079   740D         MOV     A,#0xd
   \   00007B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007E   7F02         MOV     R7,#0x2
   \   000080   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LON">`:
   \   000000   4C4F4E00     DB "LON"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LOFF">`:
   \   000000   4C4F4646     DB "LOFF"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEMP">`:
   \   000000   54454D50     DB "TEMP"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TEST">`:
   \   000000   54455354     DB "TEST"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n(ZSOK)\\n">`:
   \   000000   0A285A53     DB "\012(ZSOK)\012"
   \            4F4B290A
   \            00      
    153          

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    0      0     38
       -> afRegister                    0      0     76
       -> HalUARTOpen                   0      0     76
     GenericApp_MessageMSGCB            0      0     42
       -> osal_memcpy                   0      0     60
       -> HalUARTWrite                  0      0     54
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> GenericApp_MessageMSGCB       0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
     GenericApp_SendTheMessage          1      0    127
       -> AF_DataRequest                0      0     64
     rxCB                               0      0     98
       -> HalUARTRead                   0      0    190
       -> osal_memcmp                   0      0    196
       -> GenericApp_SendTheMessage     0      0    190
       -> osal_memcmp                   0      0    196
       -> GenericApp_SendTheMessage     0      0    190
       -> osal_memcmp                   0      0    196
       -> GenericApp_SendTheMessage     0      0    190
       -> osal_memcmp                   0      0    196
       -> GenericApp_SendTheMessage     0      0    190
       -> HalUARTWrite                  0      0    190


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     SerialApp_TxLen                      1
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_TransID                   1
     GenericApp_Init                    110
     GenericApp_ProcessEvent             77
     GenericApp_MessageMSGCB            102
     rxCB                               210
     ?Subroutine0                         8
     ??Subroutine1_0                      8
     GenericApp_SendTheMessage          131
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_MessageMSGCB?relay      6
     ??rxCB?relay                         6
     ??GenericApp_SendTheMessage?relay    6
     ?<Constant "LON">                    4
     ?<Constant "LOFF">                   5
     ?<Constant "TEMP">                   5
     ?<Constant "TEST">                   5
     ?<Constant "\n(ZSOK)\n">             9

 
 646 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
  42 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 676 bytes of CODE  memory
  42 bytes of CONST memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
